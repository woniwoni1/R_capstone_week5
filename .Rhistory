getwd()
# code to download the dataset
download.file("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0101EN-Coursera/v2/dataset/movies-db.csv", destfile="movies-db.csv")
movie_data <- read.csv("movie-db.csv", header = TRUE, sep = ",")
movie_data <- read.csv("movies-db.csv", header = TRUE, sep = ",")
movie_year = 2002
# If Movie_Year is greater than 2000...
if(movie_year > 2000){
# ...we print a message saying that it is greater than 2000.
print('Movie year is greater than 2000')
}
source("~/R/if.R")
movie_year = 1997
# If Movie_Year is greater than 2000...
if(movie_year > 2000){
# ...we print a message saying that it is greater than 2000.
print('Movie year is greater than 2000')
}else{ # If the above conditions were not met (Movie_Year is not greater than 2000)...
# ...then we print a message saying that it is not greater than 2000.
print('Movie year is not greater than 2000')
}
movie_year = 1997
# If Movie_Year is BOTH less than 2000 AND greater than 1990 -- both conditions have to be true! -- ...
if(movie_year < 2000 & movie_year > 1990 ) {
# ...then we print this message.
print('Movie year between 1990 and 2000')
}
# If Movie_Year is EITHER greater than 2010 OR less than 2000 -- any of the conditions have to be true! -- ...
if(movie_year > 2010 | movie_year < 2000 ) {
# ...then we print this message.
print('Movie year is not between 2000 and 2010')
}
movie_year <- 1997
if(movie_year != 1998) {
print('Movie year is not 1998')
}
decade = 'recent'
# If the decade given is recent...
if(decade == 'recent' ){
# Subset the dataset to include only movies after year 2000.
subset(movies_data, year >= 2000)
} else { # If not...
# Subset the dataset to include only movies before 2000.
subset(movies_data, year < 2000)
}
decade = 'recent'
# If the decade given is recent...
if(decade == 'recent' ){
# Subset the dataset to include only movies after year 2000.
subset(movies_data, year >= 2000)
} else { # If not...
# Subset the dataset to include only movies before 2000.
subset(movies_data, year < 2000)
}
source("~/R/if.R")
source("~/R/if.R")
source("~/R/if.R")
decade = 'recent'
# If the decade given is recent...
if(decade == 'recent' ){
# Subset the dataset to include only movies after year 2000.
subset(movies_data, year >= 2000)
} else { # If not...
# Subset the dataset to include only movies before 2000.
subset(movies_data, year < 2000)
}
decade = 'recent'
# If the decade given is recent...
if(decade == 'recent' ){
# Subset the dataset to include only movies after year 2000.
subset(movies_data, year >= 2000)
} else { # If not...
# Subset the dataset to include only movies before 2000.
subset(movies_data, year < 2000)
}
movie_year <- 1997
if(movie_year != 1998) {
# ...then we print this message.
print('Movie year is not 1998')
}
decade = 'recent'
# If the decade given is recent...
if(decade == 'recent' ){
# Subset the dataset to include only movies after year 2000.
subset(movies_data, year >= 2000)
} else { # If not...
# Subset the dataset to include only movies before 2000.
subset(movies_data, year < 2000)
}
# UI starter code
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/ui.R"
download.file(url, destfile = "ui.R")
# Server starter code
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/server.R"
download.file(url, destfile = "server.R")
# Dataset
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/adult.csv"
download.file(url, destfile = "adult.csv")
# UI starter code
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/ui.R"
download.file(url, destfile = "ui.R")
# Server starter code
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/server.R"
download.file(url, destfile = "server.R")
# Dataset
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/adult.csv"
download.file(url, destfile = "adult.csv")
shiny::runApp()
runApp()
runApp()
runApp()
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/adult.csv"
download.file(url, destfile = "adult.csv")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("tidyverse")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
runApp()
library(shiny)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(‘assertthat’)
runApp()
shiny::runApp()
library(shiny)
library(tidyverse)
install.packages(tidyverse)
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
library(shiny)
shiny::runApp()
install.packages('shiny')
also installing the dependency ‘cachem’
install.packages("shiny")
install.packages('shiny')
also installing the dependency ‘cachem’
install.packages(cachem)
install.packages('cachem')
shiny::runApp()
install.package('tidyverse')
install.packages('tidyverse')
runApp()
install.packages("broom", type="binary")
install.packages("broom", type = "binary")
shiny::runApp()
install.packages("assertthat")
runApp()
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DV0151EN-SkillsNetwork/labs/module_4/starter_code/adult.csv"
download.file(url, destfile = "adult.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggthemes")
library(ggthemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/selected_cities.csv"
download.file(url, destfile = "selected_cities.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model.csv"
download.file(url, destfile = "model.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model_prediction.R"
download.file(url, destfile = "model_prediction.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/ui.R"
download.file(url, destfile = "ui.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/server.R"
download.file(url, destfile = "server.R")
shiny::runApp()
runApp()
runApp()
runApp()
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/selected_cities.csv"
download.file(url, destfile = "selected_cities.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model.csv"
download.file(url, destfile = "model.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model_prediction.R"
download.file(url, destfile = "model_prediction.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/ui.R"
download.file(url, destfile = "ui.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/server.R"
download.file(url, destfile = "server.R")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/selected_cities.csv"
download.file(url, destfile = "selected_cities.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model.csv"
download.file(url, destfile = "model.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model_prediction.R"
download.file(url, destfile = "model_prediction.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/ui.R"
download.file(url, destfile = "ui.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/server.R"
download.file(url, destfile = "server.R")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
output$city_bike_map <- renderLeaflet({
leaflet(cities_max_bike) %>%
addTiles( ) %>%
addCircleMarkers(data = cities_max_bike, lng=cities_max-bike$LNG, lat=cities_max_bike$LAT, popup = cities_max_bike$LABEL,
color = cities_max_bike$BIKE_PREDDICTION_LEVEL, radius = cities_max_bike$BIKE_PREDICTION_LEVEL)
# Complete this function to render a leaflet map
# If All was selected from dropdown, then render a leaflet map with circle markers
# and popup weather LABEL for all five cities
#  observeEvent(input$city_dropdown, {
#    if(input$city_dropdown != 'All') {
#Render the city overview map
#   }
#  else {
#Render the specific city map
#   }
# If just one specific city was selected, then render a leaflet map with one marker
# on the map and a popup with DETAILED_LABEL displayed
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df(city_weather_bike_df)
head(city_weather_bike_df)
runApp()
print(head(city_weather_bike_df))
head(test_weather_data_generation)
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/selected_cities.csv"
download.file(url, destfile = "selected_cities.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model.csv"
download.file(url, destfile = "model.csv")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/model_prediction.R"
download.file(url, destfile = "model_prediction.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/ui.R"
download.file(url, destfile = "ui.R")
url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/module_5/bike_weather_app/server.R"
download.file(url, destfile = "server.R")
shiny::runApp()
df(city_weather_bike_df)
city_weather_bike_df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
results <- json_list$list
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(city_weather_bike_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
